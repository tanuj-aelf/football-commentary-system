@page "/"
@using FootballCommentary.Core.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http.Connections
@using System.Timers
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using System.Numerics
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@implements IDisposable

<PageTitle>Football Commentary System</PageTitle>

<div class="container">
    @if (!isGameCreated)
    {
        <div class="game-setup">
            <h2>Game Setup</h2>
            <div class="row mb-3">
                <div class="col">
                    <label for="teamA">Team A</label>
                    <input type="text" id="teamA" class="form-control" @bind="teamA" placeholder="Manchester United" />
                </div>
                <div class="col">
                    <label for="teamB">Team B</label>
                    <input type="text" id="teamB" class="form-control" @bind="teamB" placeholder="Liverpool" />
                </div>
            </div>
            <button class="btn btn-primary" @onclick="CreateGame" disabled="@isCreating">
                @if (isCreating)
                {
                    <span>Creating...</span>
                }
                else
                {
                    <span>Create Game</span>
                }
            </button>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                <div class="scoreboard">
                    <div class="d-flex justify-content-between mb-3">
                        <div class="team-score">
                            <h3>@teamA: @(gameState?.HomeTeam?.Score ?? 0)</h3>
                        </div>
                        <div class="game-timer scoreboard-timer compact-timer">
                            <h3>@FormatGameTime()</h3>
                        </div>
                        <div class="team-score text-end">
                            <h3>@teamB: @(gameState?.AwayTeam?.Score ?? 0)</h3>
                        </div>
                    </div>
                </div>
                
                <div class="game-field">
                    <canvas id="gameCanvas" width="600" height="400" @ref="gameCanvas"></canvas>
                </div>
                
                <div class="controls">
                    <button class="btn btn-success" @onclick="StartGame" disabled="@(isGameTimerRunning || gameState.Status == GameStatus.InProgress)">Start Game</button>
                    <button class="btn btn-primary" @onclick="KickBall" disabled="@(gameState.Status != GameStatus.InProgress)">Kick Ball</button>
                    <button class="btn btn-warning" @onclick="@(() => SimulateGoal("TeamA"))" disabled="@(gameState.Status != GameStatus.InProgress)">Goal Team A</button>
                    <button class="btn btn-warning" @onclick="@(() => SimulateGoal("TeamB"))" disabled="@(gameState.Status != GameStatus.InProgress)">Goal Team B</button>
                    <button class="btn btn-danger" @onclick="EndGame" disabled="@(gameState.Status != GameStatus.InProgress)">End Game</button>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="commentary-box">
                    <h3>Live Commentary</h3>
                    <div class="commentary-messages">
                        @foreach (var message in commentaryMessages.OrderByDescending(m => m.Timestamp))
                        {
                            <div class="commentary-message">
                                <p>@message.Text</p>
                                <small>@message.Timestamp.ToLocalTime().ToString("HH:mm:ss")</small>
                            </div>
                        }
                    </div>
                </div>

                <div class="stats-container">
                    <h3>Goal Scorers</h3>
                    <div class="goal-scorers">
                        @if (goalScorers.Count > 0)
                        {
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Player</th>
                                        <th>Team</th>
                                        <th>#</th>
                                        <th>Goals</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var scorer in goalScorers.OrderByDescending(s => s.GoalCount).ThenBy(s => s.PlayerName))
                                    {
                                        <tr>
                                            <td>@scorer.PlayerName</td>
                                            <td>
                                                <span class="team-indicator @(scorer.Team == "TeamA" ? "team-home" : "team-away")">
                                                    @(scorer.Team == "TeamA" ? teamA : teamB)
                                                </span>
                                            </td>
                                            <td>@scorer.JerseyNumber</td>
                                            <td><span class="goal-count">@scorer.GoalCount</span></td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="4" class="text-center">
                                            <small class="text-muted">Total Goals: @goalScorers.Sum(s => s.GoalCount)</small>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        }
                        else
                        {
                            <p>No goals scored yet</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private ElementReference gameCanvas;
    private string teamA = "Manchester United";
    private string teamB = "Liverpool";
    private string gameId = "";
    private bool isGameCreated = false;
    private bool isCreating = false;
    private GameState gameState = new();
    private List<CommentaryMessage> commentaryMessages = new();
    private List<GoalScorer> goalScorers = new List<GoalScorer>();
    private Timer? gameTimer;
    private CancellationTokenSource _connectionCts = new CancellationTokenSource();
    private readonly int _maxRetryAttempts = 5;
    private bool _isReconnecting = false;
    private bool isJoining = false;
    private bool hasJoinedGame = false;
    private bool inLobby = true;
    private bool disposedValue = false;
    
    // Independent game timer variables
    private int gameTimeMinutes = 0;
    private int gameTimeSeconds = 0;
    private bool isGameTimerRunning = false;
    private DateTime? gameStartTime;
    private static readonly TimeSpan GAME_DURATION = TimeSpan.FromMinutes(3.0); // 3.0 minutes in real time = 90 minutes in game time

    // Goal scorer class to track stats
    private class GoalScorer
    {
        public string PlayerId { get; set; } = string.Empty;
        public string PlayerName { get; set; } = string.Empty;
        public string Team { get; set; } = string.Empty;
        public int JerseyNumber { get; set; }
        public int GoalCount { get; set; } = 0;
    }

    protected override async Task OnInitializedAsync()
    {
        LogAllPlayerNames(); // Log player names for debugging
        await ConfigureHubConnection();
    }

    private void LogAllPlayerNames()
    {
        // Log all player names for debugging purposes
        Console.WriteLine("Available Team A (Home) player names:");
        for (int i = 1; i <= 11; i++)
        {
            string name = FootballCommentary.Core.Models.PlayerData.GetPlayerName("TeamA", i);
            Console.WriteLine($"  {i}: {name}");
        }
        
        Console.WriteLine("Available Team B (Away) player names:");
        for (int i = 1; i <= 11; i++)
        {
            string name = FootballCommentary.Core.Models.PlayerData.GetPlayerName("TeamB", i);
            Console.WriteLine($"  {i}: {name}");
        }
    }

    private void ConfigureHubHandlers()
    {
        if (hubConnection == null) return;
        
        hubConnection.On<GameState>("ReceiveGameState", async (state) =>
        {
            gameState = state;
            // Update team scores if available
            if (state.HomeTeam != null && state.AwayTeam != null)
            {
                teamA = state.HomeTeam.Name;
                teamB = state.AwayTeam.Name;
            }

            await InvokeAsync(StateHasChanged); // Update the Blazor component UI

            // Call the JavaScript function to update the canvas and handle animations
            await JSRuntime.InvokeVoidAsync("updateGameState", state);
        });
        
        hubConnection.On<string, string, Position, object>("UpdatePlayerPosition", async (gameId, playerId, position, velocity) =>
        {
            if (gameId != this.gameId) return;
            
            await InvokeAsync(() =>
            {
                try
                {
                    // Update player position in local state
                    if (gameState?.HomeTeam?.Players != null)
                    {
                        var player = gameState.HomeTeam.Players.FirstOrDefault(p => p.PlayerId == playerId);
                        if (player != null)
                        {
                            player.Position = position;
                            return;
                        }
                    }
                    
                    if (gameState?.AwayTeam?.Players != null)
                    {
                        var player = gameState.AwayTeam.Players.FirstOrDefault(p => p.PlayerId == playerId);
                        if (player != null)
                        {
                            player.Position = position;
                            return;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error handling UpdatePlayerPosition: {ex.Message}");
                }
            });
        });
        
        hubConnection.On<string, Position, object>("UpdateBallPosition", async (gameId, position, velocity) =>
        {
            if (gameId != this.gameId) return;
            
            await InvokeAsync(() =>
            {
                try
                {
                    if (gameState?.Ball != null)
                    {
                        gameState.Ball.Position = position;
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error handling UpdateBallPosition: {ex.Message}");
                }
            });
        });
        
        hubConnection.On<CommentaryMessage>("ReceiveCommentary", async (message) =>
        {
            await InvokeAsync(() =>
            {
                Console.WriteLine($"Received commentary: {message.Text}");
                // Add commentary message and limit to last 10
                commentaryMessages.Insert(0, message);
                if (commentaryMessages.Count > 10)
                {
                    commentaryMessages.RemoveAt(commentaryMessages.Count - 1);
                }
                StateHasChanged();
            });
        });
        
        hubConnection.On<List<CommentaryMessage>>("ReceiveCommentary", (messages) =>
        {
            commentaryMessages = messages;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, GameState>("GameCreated", async (id, state) =>
        {
            Console.WriteLine($"Game created event received. Game ID: {id}");
            gameId = id;
            gameState = state;
            isGameCreated = true;
            isCreating = false;
            await InvokeAsync(async () => {
                StateHasChanged();
                await JoinGame();
            });
        });

        hubConnection.On<string>("Error", (message) =>
        {
            Console.WriteLine($"Error: {message}");
            isCreating = false;
            StateHasChanged();
        });

        hubConnection.On<string>("GameEnded", (gameId) => 
        {
            Console.WriteLine($"[Blazor] GameEnded event received for game {gameId}");
            
            // Make sure timer is stopped when game ends but preserve the final time
            if (isGameTimerRunning)
            {
                Console.WriteLine("[Blazor] Stopping game timer on GameEnded event");
                
                // If the time is less than 90 minutes, set it to 90:00
                if (gameTimeMinutes < 90)
                {
                    gameTimeMinutes = 90;
                    gameTimeSeconds = 0;
                }
                
                // Stop the timer without resetting the time
                isGameTimerRunning = false;
                gameStartTime = null;
                
                StateHasChanged();
            }
        });

        hubConnection.On<GameEvent>("ReceiveGameEvent", async (gameEvent) => 
        {
            Console.WriteLine($"[Blazor] Received GameEvent: Type={gameEvent.EventType}, Team={gameEvent.TeamId}, PlayerId={gameEvent.PlayerId}");
            if (gameEvent.EventType == GameEventType.Goal)
            {
                // Use the reliable GameEvent to update the scorer list
                await InvokeAsync(() => UpdateGoalScorer(gameEvent));
            }
            else if (gameEvent.EventType == GameEventType.GameEnd)
            {
                // For GameEnd, save the final time rather than resetting to 0:00 immediately
                Console.WriteLine("[Blazor] GameEnd event received, preserving final time");
                await InvokeAsync(() => {
                    // If the event contains a game time, use it
                    if (gameEvent.GameTime.HasValue)
                    {
                        gameTimeMinutes = (int)Math.Floor(gameEvent.GameTime.Value.TotalMinutes);
                        gameTimeSeconds = gameEvent.GameTime.Value.Seconds;
                        // Make sure we show at least 90:00
                        if (gameTimeMinutes < 90)
                        {
                            gameTimeMinutes = 90;
                            gameTimeSeconds = 0;
                        }
                    }
                    else if (gameTimeMinutes < 90)
                    {
                        // Otherwise ensure at least 90:00 is shown
                        gameTimeMinutes = 90;
                        gameTimeSeconds = 0;
                    }
                    
                    // Stop the timer but keep the time display
                    isGameTimerRunning = false;
                    gameStartTime = null;
                    
                    StateHasChanged();
                });
            }
            // Handle other specific game events if needed (e.g., display foul messages)
        });

        hubConnection.On<GameState>("GameStateUpdated", async (state) =>
        {
            await InvokeAsync(async () =>
            {
                try 
                {
                    double minutes = 0;
                    double seconds = 0;
                    
                    if (state?.GameTime != null)
                    {
                        minutes = state.GameTime.TotalMinutes;
                        seconds = state.GameTime.TotalSeconds % 60;
                    }
                    
                    Console.WriteLine($"[Blazor] GameStateUpdated event received. Status={state?.Status}, Time={minutes}:{seconds:00}");
                    
                    // Goal scoring events are now handled by the ReceiveGameEvent handler.
                    
                    // Check if game has ended and reset timer if needed
                    if (state?.Status == GameStatus.Ended && isGameTimerRunning)
                    {
                        Console.WriteLine("[Blazor] Game ended, stopping and resetting timer");
                        ResetGameTimer();
                    }
                    
                    // Debug player positions
                    int homePlayerCount = state?.HomeTeam?.Players?.Count ?? 0;
                    int awayPlayerCount = state?.AwayTeam?.Players?.Count ?? 0;
                    Console.WriteLine($"[Blazor] Player Counts: Home={homePlayerCount}, Away={awayPlayerCount}");
                    if (state?.HomeTeam?.Players != null && homePlayerCount > 0)
                    {
                        var player = state.HomeTeam.Players[0];
                        Console.WriteLine($"[Blazor] Home player[0] pos: x={player?.Position?.X}, y={player?.Position?.Y}");
                    }
                    if (state?.Ball?.Position != null)
                    {
                        Console.WriteLine($"[Blazor] Ball position: x={state.Ball.Position.X}, y={state.Ball.Position.Y}");
                    }
                    
                    // Save the updated game state
                    gameState = state;
                    
                    // Update Blazor UI immediately
                    StateHasChanged();

                    // Call the JavaScript function to update its state
                    if (state != null) 
                    {
                        Console.WriteLine("[Blazor] Invoking JS: updateGameState...");
                        await JSRuntime.InvokeVoidAsync("updateGameState", state);
                        Console.WriteLine("[Blazor] JS: updateGameState invoked.");
                    }
                    else
                    {
                         Console.WriteLine("[Blazor] Skipping JS interop: state is null.");
                    }
                }
                catch (JSException jsEx)
                {
                    // Catch specific JS interop exceptions
                    Console.Error.WriteLine($"[Blazor] Error calling JS updateGameState: {jsEx.Message}");
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"[Blazor] Error handling GameStateUpdated: {ex.GetType().Name} - {ex.Message}");
                     if (ex.InnerException != null)
                     {
                         Console.Error.WriteLine($"  Inner Exc: {ex.InnerException.GetType().Name} - {ex.InnerException.Message}");
                     }
                     Console.Error.WriteLine($"  State Object: {(state == null ? "NULL" : System.Text.Json.JsonSerializer.Serialize(state))}"); // Log state on error
                }
            });
        });
    }

    private async Task ConfigureHubConnection()
    {
        try
        {
            Console.WriteLine("Configuring hub connection to http://localhost:7002/gamehub");
            
            hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:7002/gamehub", options => 
                {
                    // Allow both WebSockets and long polling
                    options.Transports = HttpTransportType.WebSockets | HttpTransportType.LongPolling;
                    // Add additional logging
                    options.AccessTokenProvider = () => 
                    {
                        Console.WriteLine("AccessTokenProvider called");
                        return Task.FromResult<string?>(null);
                    };
                })
                .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(0), TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
                .ConfigureLogging(logging => {
                    logging.SetMinimumLevel(LogLevel.Debug);
                })
                .Build();
            
            Console.WriteLine("Hub connection built, setting up event handlers");
            
            hubConnection.Reconnecting += async (error) =>
            {
                _isReconnecting = true;
                commentaryMessages.Add(new CommentaryMessage { Text = "Connection lost, attempting to reconnect...", Timestamp = DateTime.UtcNow });
                Console.WriteLine($"Connection lost: {error?.Message}");
                StateHasChanged();
                await Task.CompletedTask;
            };
            
            hubConnection.Reconnected += async (connectionId) =>
            {
                _isReconnecting = false;
                commentaryMessages.Add(new CommentaryMessage { Text = $"Connection restored. Connection ID: {connectionId}", Timestamp = DateTime.UtcNow });
                Console.WriteLine($"Connection restored. Connection ID: {connectionId}");
                
                if (!string.IsNullOrEmpty(gameId))
                {
                    await JoinGame();
                }
                
                StateHasChanged();
                await Task.CompletedTask;
            };
            
            hubConnection.Closed += async (error) =>
            {
                if (error != null)
                {
                    commentaryMessages.Add(new CommentaryMessage { Text = $"Connection closed with error: {error.Message}", Timestamp = DateTime.UtcNow });
                    Console.Error.WriteLine($"Connection closed with error: {error}");
                }
                else
                {
                    commentaryMessages.Add(new CommentaryMessage { Text = "Connection closed", Timestamp = DateTime.UtcNow });
                }
                
                if (!disposedValue)
                {
                    await Task.Delay(new Random().Next(0, 5) * 1000);
                    await StartHubConnection();
                }
            };
            
            ConfigureHubHandlers();
            
            Console.WriteLine("Starting hub connection");
            await StartHubConnection();
            Console.WriteLine($"Hub connection started. State: {hubConnection.State}");
        }
        catch (Exception ex)
        {
            commentaryMessages.Add(new CommentaryMessage { Text = $"Error configuring hub connection: {ex.Message}", Timestamp = DateTime.UtcNow });
            Console.Error.WriteLine($"Error configuring hub connection: {ex}");
        }
    }

    private void UpdateGameState()
    {
        // Update UI based on game state changes
    }

    private async Task StartHubConnection()
    {
        if (disposedValue)
        {
            Console.WriteLine("StartHubConnection called, but object is disposed");
            return;
        }
            
        if (hubConnection == null)
        {
            Console.WriteLine("Hub connection is null, reconfiguring");
            await ConfigureHubConnection();
            return;
        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            try
            {
                Console.WriteLine("Starting disconnected hub connection");
                await hubConnection.StartAsync();
                Console.WriteLine($"Hub connection started successfully. State: {hubConnection.State}");
                commentaryMessages.Add(new CommentaryMessage { Text = "Connected to game hub", Timestamp = DateTime.UtcNow });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to start hub connection: {ex.GetType().Name} - {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"Inner exception: {ex.InnerException.GetType().Name} - {ex.InnerException.Message}");
                }
                commentaryMessages.Add(new CommentaryMessage { Text = $"Connection error: {ex.Message}", Timestamp = DateTime.UtcNow });
                Console.Error.WriteLine($"Connection error: {ex}");
            }
        }
        else
        {
            Console.WriteLine($"Hub already in state: {hubConnection.State}, no need to start");
        }
    }

    private async Task AttemptReconnection()
    {
        if (_connectionCts.IsCancellationRequested)
            return;
            
        for (int attempt = 0; attempt < _maxRetryAttempts; attempt++)
        {
            try
            {
                await Task.Delay(TimeSpan.FromSeconds(Math.Pow(2, attempt)), _connectionCts.Token);
                
                if (_connectionCts.IsCancellationRequested)
                    return;
                
                commentaryMessages.Add(new CommentaryMessage { Text = $"Attempting to reconnect... (Attempt {attempt + 1} of {_maxRetryAttempts})", Timestamp = DateTime.UtcNow });
                StateHasChanged();
                
                await hubConnection.StartAsync(_connectionCts.Token);
                
                commentaryMessages.Add(new CommentaryMessage { Text = "Reconnected to game hub", Timestamp = DateTime.UtcNow });
                
                if (!string.IsNullOrEmpty(gameId))
                {
                    await JoinGame();
                }
                
                StateHasChanged();
                return;
            }
            catch (Exception ex)
            {
                commentaryMessages.Add(new CommentaryMessage { Text = $"Reconnection attempt {attempt + 1} failed: {ex.Message}", Timestamp = DateTime.UtcNow });
                StateHasChanged();
            }
        }
        
        commentaryMessages.Add(new CommentaryMessage { Text = "Failed to reconnect after multiple attempts. Please refresh the page.", Timestamp = DateTime.UtcNow });
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (gameTimer == null)
            {
                // Create a timer that updates the UI every 100ms
                gameTimer = new Timer(100); // 100ms for smoother updates
                gameTimer.Elapsed += OnTimerElapsed;
                gameTimer.Start();
                
                Console.WriteLine("Game timer started");
            }
        }
    }

    private void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        bool needsStateChange = false;
        
        // Check if game has ended and stop timer if needed
        if (gameState?.Status == GameStatus.Ended && isGameTimerRunning)
        {
            Console.WriteLine("[Blazor] Game status is Ended, stopping timer from OnTimerElapsed");
            
            // If the time is less than 90 minutes, set it to 90:00
            if (gameTimeMinutes < 90)
            {
                gameTimeMinutes = 90;
                gameTimeSeconds = 0;
            }
            
            // Stop the timer without resetting the time
            isGameTimerRunning = false;
            gameStartTime = null;
            
            needsStateChange = true;
        }
        
        // Prefer using server time if available
        if (gameState?.GameTime != null && isGameTimerRunning)
        {
            // Use the server's game time instead of calculating locally
            gameTimeMinutes = (int)Math.Floor(gameState.GameTime.TotalMinutes);
            gameTimeSeconds = gameState.GameTime.Seconds;
            needsStateChange = true;
            
            // If game is still in progress but has reached 90 minutes, don't reset the timer
            // This keeps showing 90:00 until the server actually ends the game
            if (gameTimeMinutes >= 90 && gameState.Status == GameStatus.InProgress)
            {
                gameTimeMinutes = 90;
                gameTimeSeconds = 0;
                needsStateChange = true;
            }
        }
        // Fallback to local timer only if server time is not available
        else if (isGameTimerRunning && gameStartTime.HasValue)
        {
            TimeSpan elapsed = DateTime.Now - gameStartTime.Value;
            
            // Convert elapsed real time to game minutes (0-90)
            double totalGameMinutes = elapsed.TotalSeconds / GAME_DURATION.TotalSeconds * 90;
            
            // Cap at 90 minutes
            if (totalGameMinutes > 90)
            {
                gameTimeMinutes = 90;
                gameTimeSeconds = 0;
            }
            else
            {
                gameTimeMinutes = (int)Math.Floor(totalGameMinutes);
                gameTimeSeconds = (int)Math.Floor((totalGameMinutes - gameTimeMinutes) * 60);
            }
            
            needsStateChange = true;
            
            // Only end the game if we've reached 90 minutes AND the game is still in progress
            if (totalGameMinutes >= 90 && gameState?.Status == GameStatus.InProgress && hubConnection?.State == HubConnectionState.Connected)
            {
                Console.WriteLine("[Blazor] Client timer reached 90 minutes, ending game");
                _ = EndGame(); // Don't await here to avoid blocking the timer
            }
        }
            
        // Request latest game state if connected, regardless of status
        if (!_isReconnecting && hubConnection?.State == HubConnectionState.Connected && !string.IsNullOrEmpty(gameId))
        {
            if (DateTime.Now.Millisecond < 250) // roughly 4 times per second
            {
                _ = hubConnection.InvokeAsync("GetGameState", gameId);
                needsStateChange = true;
            }
        }
        
        // Only call InvokeAsync if we need to update the UI
        if (needsStateChange) 
        {
             InvokeAsync(StateHasChanged);
        }
    }

    private async Task CreateGame()
    {
        if (hubConnection?.State != HubConnectionState.Connected)
        {
            commentaryMessages.Add(new CommentaryMessage { Text = "Unable to create game: Not connected to server", Timestamp = DateTime.UtcNow });
            return;
        }

        try
        {
            isCreating = true;
            Console.WriteLine($"Creating game between {teamA} and {teamB}");
            
            // Reset game timer
            ResetGameTimer();
            
            // Call the CreateGame method on the hub and get the game ID directly
            gameId = await hubConnection.InvokeAsync<string>("CreateGame", teamA, teamB);
            
            Console.WriteLine($"Game created with ID: {gameId}");
            isGameCreated = true;
            isCreating = false;
            
            // Join the game we just created
            await JoinGame();
        }
        catch (Exception ex)
        {
            commentaryMessages.Add(new CommentaryMessage { Text = $"Error creating game: {ex.Message}", Timestamp = DateTime.UtcNow });
            Console.Error.WriteLine($"Error creating game: {ex}");
            isCreating = false;
        }
    }

    public async Task JoinGame()
    {
        if (string.IsNullOrWhiteSpace(gameId))
        {
            Console.WriteLine("JoinGame called but gameId is empty");
            commentaryMessages.Add(new CommentaryMessage { Text = "Please enter a game ID to join.", Timestamp = DateTime.UtcNow });
            return;
        }
        
        try
        {
            Console.WriteLine($"Attempting to join game with ID: {gameId}");
            isJoining = true;
            StateHasChanged();
            
            // Ensure connection is active before sending
            if (hubConnection?.State != HubConnectionState.Connected)
            {
                Console.WriteLine($"Hub not connected. Current state: {hubConnection?.State}");
                await StartHubConnection();
                
                if (hubConnection?.State != HubConnectionState.Connected)
                {
                    Console.WriteLine("Failed to connect hub after retry");
                    commentaryMessages.Add(new CommentaryMessage { Text = "Cannot join game: Connection to server is not active.", Timestamp = DateTime.UtcNow });
                    isJoining = false;
                    StateHasChanged();
                    return;
                }
            }
            
            // Reset the goal scorers list when joining a new game
            goalScorers.Clear();
            
            Console.WriteLine($"Sending JoinGame request to hub for game ID: {gameId}");
            await hubConnection.SendAsync("JoinGame", gameId);
            Console.WriteLine($"JoinGame request sent successfully");
            
            hasJoinedGame = true;
            inLobby = false;
            commentaryMessages.Clear();
            commentaryMessages.Add(new CommentaryMessage { Text = $"Joined game {gameId}", Timestamp = DateTime.UtcNow });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in JoinGame: {ex.Message}");
            commentaryMessages.Add(new CommentaryMessage { Text = $"Error joining game: {ex.Message}", Timestamp = DateTime.UtcNow });
            Console.Error.WriteLine($"Error joining game: {ex}");
            hasJoinedGame = false;
        }
        finally
        {
            isJoining = false;
            StateHasChanged();
        }
    }

    private async Task StartGame()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected && isGameCreated)
        {
            try
            {
                // Start the independent game timer
                StartGameTimer();
                
                // Start the actual game on the server
                await hubConnection.SendAsync("StartGame", gameId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error starting game: {ex.Message}");
            }
        }
    }

    private async Task EndGame()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected && isGameCreated)
        {
            try
            {
                // Stop the independent game timer
                StopGameTimer();
                
                await hubConnection.SendAsync("EndGame", gameId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error ending game: {ex.Message}");
            }
        }
    }

    private async Task KickBall()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected && isGameCreated)
        {
            try
            {
                await hubConnection.SendAsync("KickBall", gameId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error kicking ball: {ex.Message}");
            }
        }
    }

    private async Task SimulateGoal(string teamId)
    {
        if (hubConnection is null) return;
        
        try
        {
            // Use a random player for more variety in the game
            Random random = new Random();
            int playerId = random.Next(1, 12); // Random player between 1 and 11
            
            Console.WriteLine($"Simulating goal for team {teamId} with player ID {playerId}");
            string playerName = FootballCommentary.Core.Models.PlayerData.GetPlayerName(teamId, playerId);
            Console.WriteLine($"Player name retrieved: {playerName}");
            
            await hubConnection.SendAsync("SimulateGoal", gameId, teamId, playerId);
            
            // Also update local goalScorers list for immediate UI feedback
            var gameEvent = new GameEvent
            {
                GameId = gameId,
                EventType = GameEventType.Goal,
                TeamId = teamId,
                PlayerId = playerId
            };
            
            await UpdateGoalScorer(gameEvent);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error simulating goal: {ex.Message}");
        }
    }

    private async Task UpdateGoalScorer(GameEvent gameEvent)
    {
        try
        {
            Console.WriteLine($"UpdateGoalScorer called with event type {gameEvent.EventType} and player {gameEvent.PlayerId}");
            
            await InvokeAsync(() =>
            {
                if (gameEvent.PlayerId.HasValue)
                {
                    // Get player name using PlayerData class
                    string playerName = FootballCommentary.Core.Models.PlayerData.GetPlayerName(gameEvent.TeamId, gameEvent.PlayerId.Value);
                    Console.WriteLine($"Updating goal scorer: {playerName} from team {gameEvent.TeamId} with jersey #{gameEvent.PlayerId.Value}");
                    
                    var existingScorer = goalScorers.FirstOrDefault(s => 
                        s.PlayerId == $"{gameEvent.TeamId}_{gameEvent.PlayerId.Value}");
                    
                    if (existingScorer != null)
                    {
                        // Increment goal count for existing scorer
                        existingScorer.GoalCount++;
                        Console.WriteLine($"Incremented goal count for {existingScorer.PlayerName} to {existingScorer.GoalCount}");
                    }
                    else
                    {
                        // Add new goal scorer
                        int jerseyNumber = gameEvent.PlayerId.Value;
                        
                        var newScorer = new GoalScorer
                        {
                            PlayerId = $"{gameEvent.TeamId}_{gameEvent.PlayerId.Value}",
                            PlayerName = playerName,
                            Team = gameEvent.TeamId,
                            JerseyNumber = jerseyNumber,
                            GoalCount = 1
                        };
                        
                        goalScorers.Add(newScorer);
                        Console.WriteLine($"Added new goal scorer: {newScorer.PlayerName} with jersey #{newScorer.JerseyNumber}");
                    }
                    
                    // Print current goal scorers for debugging
                    Console.WriteLine($"Current goal scorers (count: {goalScorers.Count}):");
                    foreach (var scorer in goalScorers)
                    {
                        Console.WriteLine($"  - {scorer.PlayerName} ({scorer.Team}) #{scorer.JerseyNumber}: {scorer.GoalCount} goals");
                    }
                    
                    // Force UI update
                    StateHasChanged();
                }
                else
                {
                    Console.Error.WriteLine("Cannot update goal scorer: PlayerId is null");
                }
            });
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error updating goal scorer: {ex.Message}");
            Console.Error.WriteLine(ex.StackTrace);
        }
    }

    private async Task RenderGameField()
    {
        if (isGameCreated && gameCanvas.Id is not null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("renderGameField", gameCanvas, gameState);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error rendering game field: {ex.Message}");
            }
        }
    }

    public async Task LeaveGame()
    {
        try
        {
            if (hubConnection?.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("LeaveGame", gameId);
                commentaryMessages.Add(new CommentaryMessage { Text = $"Left game {gameId}", Timestamp = DateTime.UtcNow });
            }
            
            // Reset game timer
            ResetGameTimer();
            
            gameId = string.Empty;
            inLobby = true;
            hasJoinedGame = false;
            gameState = new GameState();
            commentaryMessages.Clear();
        }
        catch (Exception ex)
        {
            commentaryMessages.Add(new CommentaryMessage { Text = $"Error leaving game: {ex.Message}", Timestamp = DateTime.UtcNow });
            Console.Error.WriteLine($"Error leaving game: {ex}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await DisconnectGracefully();
        await InvokeAsync(StateHasChanged);
        GC.SuppressFinalize(this);
    }

    private async Task DisconnectGracefully()
    {
        if (!disposedValue)
        {
            disposedValue = true;

            // Reset game timer
            ResetGameTimer();
            
            // Stop game timer
            gameTimer?.Stop();
            gameTimer?.Dispose();
            gameTimer = null;

            // Cancel reconnection attempts
            _connectionCts?.Cancel();
            _connectionCts?.Dispose();
            _connectionCts = null;

            // Clean up hub connection
            if (hubConnection != null)
            {
                try
                {
                    if (!string.IsNullOrEmpty(gameId))
                    {
                        await LeaveGame();
                    }
                    
                    await hubConnection.DisposeAsync();
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error disposing hub connection: {ex}");
                }
                finally
                {
                    hubConnection = null;
                }
            }
        }
    }

    public void Dispose()
    {
        // Call the async disposal method synchronously but don't wait for it
        _ = DisconnectGracefully();
        
        // Dispose of timer synchronously if not already disposed
        if (!disposedValue)
        {
            gameTimer?.Stop();
            gameTimer?.Dispose();
            gameTimer = null;
            
            _connectionCts?.Cancel();
            
            disposedValue = true;
        }
    }

    private string FormatGameTime()
    {
        // Return the independently tracked game time
        return $"{gameTimeMinutes}:{gameTimeSeconds:D2}";
    }

    private string FormatGameTime(TimeSpan? gameTime)
    {
        if (gameTime == null) return "0:00";
        
        int minutes = (int)Math.Floor(gameTime.Value.TotalMinutes);
        int seconds = gameTime.Value.Seconds;
        
        return $"{minutes}:{seconds:D2}";
    }

    private void AddTestGoalScorer()
    {
        // Get a random player for testing
        Random random = new Random();
        string teamId = random.Next(2) == 0 ? "TeamA" : "TeamB";
        int playerId = random.Next(1, 12);
        
        string playerName = FootballCommentary.Core.Models.PlayerData.GetPlayerName(teamId, playerId);
        Console.WriteLine($"Adding test goal scorer: {playerName} (Team {teamId}, #{playerId})");
        
        // Check if this scorer already exists
        var existingScorer = goalScorers.FirstOrDefault(s => 
            s.PlayerId == $"{teamId}_{playerId}");
        
        if (existingScorer != null)
        {
            // Increment goal count
            existingScorer.GoalCount++;
            Console.WriteLine($"Incremented goal count for {existingScorer.PlayerName} to {existingScorer.GoalCount}");
        }
        else
        {
            // Add a new test goal scorer
            var testScorer = new GoalScorer
            {
                PlayerId = $"{teamId}_{playerId}",
                PlayerName = playerName,
                Team = teamId,
                JerseyNumber = playerId,
                GoalCount = 1
            };
            
            goalScorers.Add(testScorer);
            Console.WriteLine($"Added test goal scorer {playerName}. Current count: {goalScorers.Count}");
        }
        
        // Force UI update
        StateHasChanged();
    }

    // Game timer methods
    private void StartGameTimer()
    {
        gameStartTime = DateTime.Now;
        isGameTimerRunning = true;
        gameTimeMinutes = 0;
        gameTimeSeconds = 0;
    }
    
    private void StopGameTimer()
    {
        isGameTimerRunning = false;
    }
    
    private void ResetGameTimer()
    {
        isGameTimerRunning = false;
        gameTimeMinutes = 0;
        gameTimeSeconds = 0;
        gameStartTime = null;
    }
} 