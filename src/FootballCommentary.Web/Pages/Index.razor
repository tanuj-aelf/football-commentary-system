@page "/"
@using FootballCommentary.Core.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http.Connections
@using System.Timers
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using System.Numerics
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@implements IDisposable

<PageTitle>Football Commentary System</PageTitle>

<div class="container">
    @if (!isGameCreated)
    {
        <div class="game-setup">
            <h2>Game Setup</h2>
            <div class="row mb-3">
                <div class="col">
                    <label for="teamA">Team A</label>
                    <input type="text" id="teamA" class="form-control" @bind="teamA" placeholder="Manchester United" />
                </div>
                <div class="col">
                    <label for="teamB">Team B</label>
                    <input type="text" id="teamB" class="form-control" @bind="teamB" placeholder="Liverpool" />
                </div>
            </div>
            <button class="btn btn-primary" @onclick="CreateGame" disabled="@isCreating">
                @if (isCreating)
                {
                    <span>Creating...</span>
                }
                else
                {
                    <span>Create Game</span>
                }
            </button>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                <div class="scoreboard">
                    <div class="d-flex justify-content-between mb-3">
                        <div class="team-score">
                            <h3>Team A: @(gameState?.HomeTeam?.Score ?? 0)</h3>
                        </div>
                        <div class="game-timer">
                            <h3>@FormatGameTime(gameState?.GameTime)</h3>
                        </div>
                        <div class="team-score">
                            <h3>Team B: @(gameState?.AwayTeam?.Score ?? 0)</h3>
                        </div>
                    </div>
                </div>
                
                <div class="game-field">
                    <canvas id="gameCanvas" width="600" height="400" @ref="gameCanvas"></canvas>
                </div>
                
                <div class="controls">
                    <button class="btn btn-success" @onclick="StartGame" disabled="@(gameState.Status == GameStatus.InProgress)">Start Game</button>
                    <button class="btn btn-primary" @onclick="KickBall" disabled="@(gameState.Status != GameStatus.InProgress)">Kick Ball</button>
                    <button class="btn btn-warning" @onclick="@(() => SimulateGoal("TeamA"))" disabled="@(gameState.Status != GameStatus.InProgress)">Goal Team A</button>
                    <button class="btn btn-warning" @onclick="@(() => SimulateGoal("TeamB"))" disabled="@(gameState.Status != GameStatus.InProgress)">Goal Team B</button>
                    <button class="btn btn-danger" @onclick="EndGame" disabled="@(gameState.Status != GameStatus.InProgress)">End Game</button>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="commentary-box">
                    <h3>Live Commentary</h3>
                    <div class="commentary-messages">
                        @foreach (var message in commentaryMessages.OrderByDescending(m => m.Timestamp))
                        {
                            <div class="commentary-message">
                                <p>@message.Text</p>
                                <small>@message.Timestamp.ToLocalTime().ToString("HH:mm:ss")</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private ElementReference gameCanvas;
    private string teamA = "Manchester United";
    private string teamB = "Liverpool";
    private string gameId = "";
    private bool isGameCreated = false;
    private bool isCreating = false;
    private GameState gameState = new();
    private List<CommentaryMessage> commentaryMessages = new();
    private Timer? gameTimer;
    private CancellationTokenSource _connectionCts = new CancellationTokenSource();
    private readonly int _maxRetryAttempts = 5;
    private bool _isReconnecting = false;
    private bool isJoining = false;
    private bool hasJoinedGame = false;
    private bool inLobby = true;
    private bool disposedValue = false;

    protected override async Task OnInitializedAsync()
    {
        await ConfigureHubConnection();
    }

    private void ConfigureHubHandlers()
    {
        if (hubConnection == null) return;
        
        hubConnection.On<GameState>("ReceiveGameState", async (state) =>
        {
            gameState = state;
            // Update team scores if available
            if (state.HomeTeam != null && state.AwayTeam != null)
            {
                teamA = state.HomeTeam.Name;
                teamB = state.AwayTeam.Name;
            }

            await InvokeAsync(StateHasChanged); // Update the Blazor component UI

            // Call the JavaScript function to update the canvas and handle animations
            await JSRuntime.InvokeVoidAsync("updateGameState", state);
        });
        
        hubConnection.On<GameState>("GameStateUpdated", async (state) =>
        {
            await InvokeAsync(async () =>
            {
                try 
                {
                    double minutes = 0;
                    double seconds = 0;
                    
                    if (state?.GameTime != null)
                    {
                        minutes = state.GameTime.TotalMinutes;
                        seconds = state.GameTime.TotalSeconds % 60;
                    }
                    
                    Console.WriteLine($"[Blazor] GameStateUpdated event received. Status={state?.Status}, Time={minutes}:{seconds:00}");
                    
                    // Debug player positions
                    int homePlayerCount = state?.HomeTeam?.Players?.Count ?? 0;
                    int awayPlayerCount = state?.AwayTeam?.Players?.Count ?? 0;
                    Console.WriteLine($"[Blazor] Player Counts: Home={homePlayerCount}, Away={awayPlayerCount}");
                    if (state?.HomeTeam?.Players != null && homePlayerCount > 0)
                    {
                        var player = state.HomeTeam.Players[0];
                        Console.WriteLine($"[Blazor] Home player[0] pos: x={player?.Position?.X}, y={player?.Position?.Y}");
                    }
                    if (state?.Ball?.Position != null)
                    {
                        Console.WriteLine($"[Blazor] Ball position: x={state.Ball.Position.X}, y={state.Ball.Position.Y}");
                    }
                    
                    // Save the updated game state
                    gameState = state;
                    
                    // Update Blazor UI immediately
                    StateHasChanged();

                    // Call the JavaScript function to update its state
                    if (state != null) 
                    {
                        Console.WriteLine("[Blazor] Invoking JS: updateGameState...");
                        await JSRuntime.InvokeVoidAsync("updateGameState", state);
                        Console.WriteLine("[Blazor] JS: updateGameState invoked.");
                    }
                    else
                    {
                         Console.WriteLine("[Blazor] Skipping JS interop: state is null.");
                    }
                }
                catch (JSException jsEx)
                {
                    // Catch specific JS interop exceptions
                    Console.Error.WriteLine($"[Blazor] Error calling JS updateGameState: {jsEx.Message}");
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"[Blazor] Error handling GameStateUpdated: {ex.GetType().Name} - {ex.Message}");
                     if (ex.InnerException != null)
                     {
                         Console.Error.WriteLine($"  Inner Exc: {ex.InnerException.GetType().Name} - {ex.InnerException.Message}");
                     }
                     Console.Error.WriteLine($"  State Object: {(state == null ? "NULL" : System.Text.Json.JsonSerializer.Serialize(state))}"); // Log state on error
                }
            });
        });
        
        hubConnection.On<string, string, Position, object>("UpdatePlayerPosition", async (gameId, playerId, position, velocity) =>
        {
            if (gameId != this.gameId) return;
            
            await InvokeAsync(() =>
            {
                try
                {
                    // Update player position in local state
                    if (gameState?.HomeTeam?.Players != null)
                    {
                        var player = gameState.HomeTeam.Players.FirstOrDefault(p => p.PlayerId == playerId);
                        if (player != null)
                        {
                            player.Position = position;
                            return;
                        }
                    }
                    
                    if (gameState?.AwayTeam?.Players != null)
                    {
                        var player = gameState.AwayTeam.Players.FirstOrDefault(p => p.PlayerId == playerId);
                        if (player != null)
                        {
                            player.Position = position;
                            return;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error handling UpdatePlayerPosition: {ex.Message}");
                }
            });
        });
        
        hubConnection.On<string, Position, object>("UpdateBallPosition", async (gameId, position, velocity) =>
        {
            if (gameId != this.gameId) return;
            
            await InvokeAsync(() =>
            {
                try
                {
                    if (gameState?.Ball != null)
                    {
                        gameState.Ball.Position = position;
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error handling UpdateBallPosition: {ex.Message}");
                }
            });
        });
        
        hubConnection.On<CommentaryMessage>("ReceiveCommentary", async (message) =>
        {
            await InvokeAsync(() =>
            {
                Console.WriteLine($"Received commentary: {message.Text}");
                // Add commentary message and limit to last 10
                commentaryMessages.Insert(0, message);
                if (commentaryMessages.Count > 10)
                {
                    commentaryMessages.RemoveAt(commentaryMessages.Count - 1);
                }
                StateHasChanged();
            });
        });
        
        hubConnection.On<List<CommentaryMessage>>("ReceiveCommentary", (messages) =>
        {
            commentaryMessages = messages;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, GameState>("GameCreated", async (id, state) =>
        {
            Console.WriteLine($"Game created event received. Game ID: {id}");
            gameId = id;
            gameState = state;
            isGameCreated = true;
            isCreating = false;
            await InvokeAsync(async () => {
                StateHasChanged();
                await JoinGame();
            });
        });

        hubConnection.On<string>("Error", (message) =>
        {
            Console.WriteLine($"Error: {message}");
            isCreating = false;
            StateHasChanged();
        });
    }

    private async Task ConfigureHubConnection()
    {
        try
        {
            Console.WriteLine("Configuring hub connection to http://localhost:7002/gamehub");
            
            hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:7002/gamehub", options => 
                {
                    // Allow both WebSockets and long polling
                    options.Transports = HttpTransportType.WebSockets | HttpTransportType.LongPolling;
                    // Add additional logging
                    options.AccessTokenProvider = () => 
                    {
                        Console.WriteLine("AccessTokenProvider called");
                        return Task.FromResult<string?>(null);
                    };
                })
                .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(0), TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
                .ConfigureLogging(logging => {
                    logging.SetMinimumLevel(LogLevel.Debug);
                })
                .Build();
            
            Console.WriteLine("Hub connection built, setting up event handlers");
            
            hubConnection.Reconnecting += async (error) =>
            {
                _isReconnecting = true;
                commentaryMessages.Add(new CommentaryMessage { Text = "Connection lost, attempting to reconnect...", Timestamp = DateTime.UtcNow });
                Console.WriteLine($"Connection lost: {error?.Message}");
                StateHasChanged();
                await Task.CompletedTask;
            };
            
            hubConnection.Reconnected += async (connectionId) =>
            {
                _isReconnecting = false;
                commentaryMessages.Add(new CommentaryMessage { Text = $"Connection restored. Connection ID: {connectionId}", Timestamp = DateTime.UtcNow });
                Console.WriteLine($"Connection restored. Connection ID: {connectionId}");
                
                if (!string.IsNullOrEmpty(gameId))
                {
                    await JoinGame();
                }
                
                StateHasChanged();
                await Task.CompletedTask;
            };
            
            hubConnection.Closed += async (error) =>
            {
                if (error != null)
                {
                    commentaryMessages.Add(new CommentaryMessage { Text = $"Connection closed with error: {error.Message}", Timestamp = DateTime.UtcNow });
                    Console.Error.WriteLine($"Connection closed with error: {error}");
                }
                else
                {
                    commentaryMessages.Add(new CommentaryMessage { Text = "Connection closed", Timestamp = DateTime.UtcNow });
                }
                
                if (!disposedValue)
                {
                    await Task.Delay(new Random().Next(0, 5) * 1000);
                    await StartHubConnection();
                }
            };
            
            ConfigureHubHandlers();
            
            Console.WriteLine("Starting hub connection");
            await StartHubConnection();
            Console.WriteLine($"Hub connection started. State: {hubConnection.State}");
        }
        catch (Exception ex)
        {
            commentaryMessages.Add(new CommentaryMessage { Text = $"Error configuring hub connection: {ex.Message}", Timestamp = DateTime.UtcNow });
            Console.Error.WriteLine($"Error configuring hub connection: {ex}");
        }
    }

    private void UpdateGameState()
    {
        // Update UI based on game state changes
    }

    private async Task StartHubConnection()
    {
        if (disposedValue)
        {
            Console.WriteLine("StartHubConnection called, but object is disposed");
            return;
        }
            
        if (hubConnection == null)
        {
            Console.WriteLine("Hub connection is null, reconfiguring");
            await ConfigureHubConnection();
            return;
        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            try
            {
                Console.WriteLine("Starting disconnected hub connection");
                await hubConnection.StartAsync();
                Console.WriteLine($"Hub connection started successfully. State: {hubConnection.State}");
                commentaryMessages.Add(new CommentaryMessage { Text = "Connected to game hub", Timestamp = DateTime.UtcNow });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to start hub connection: {ex.GetType().Name} - {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"Inner exception: {ex.InnerException.GetType().Name} - {ex.InnerException.Message}");
                }
                commentaryMessages.Add(new CommentaryMessage { Text = $"Connection error: {ex.Message}", Timestamp = DateTime.UtcNow });
                Console.Error.WriteLine($"Connection error: {ex}");
            }
        }
        else
        {
            Console.WriteLine($"Hub already in state: {hubConnection.State}, no need to start");
        }
    }

    private async Task AttemptReconnection()
    {
        if (_connectionCts.IsCancellationRequested)
            return;
            
        for (int attempt = 0; attempt < _maxRetryAttempts; attempt++)
        {
            try
            {
                await Task.Delay(TimeSpan.FromSeconds(Math.Pow(2, attempt)), _connectionCts.Token);
                
                if (_connectionCts.IsCancellationRequested)
                    return;
                
                commentaryMessages.Add(new CommentaryMessage { Text = $"Attempting to reconnect... (Attempt {attempt + 1} of {_maxRetryAttempts})", Timestamp = DateTime.UtcNow });
                StateHasChanged();
                
                await hubConnection.StartAsync(_connectionCts.Token);
                
                commentaryMessages.Add(new CommentaryMessage { Text = "Reconnected to game hub", Timestamp = DateTime.UtcNow });
                
                if (!string.IsNullOrEmpty(gameId))
                {
                    await JoinGame();
                }
                
                StateHasChanged();
                return;
            }
            catch (Exception ex)
            {
                commentaryMessages.Add(new CommentaryMessage { Text = $"Reconnection attempt {attempt + 1} failed: {ex.Message}", Timestamp = DateTime.UtcNow });
                StateHasChanged();
            }
        }
        
        commentaryMessages.Add(new CommentaryMessage { Text = "Failed to reconnect after multiple attempts. Please refresh the page.", Timestamp = DateTime.UtcNow });
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (gameTimer == null)
            {
                // Create a timer that updates the UI every second
                gameTimer = new Timer(250); // 250ms for smoother updates
                gameTimer.Elapsed += OnTimerElapsed;
                gameTimer.Start();
                
                Console.WriteLine("Game timer started");
            }
        }
    }

    private void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        if (!_isReconnecting && gameState != null)
        {
            bool needsStateChange = false;
            
            // Request latest game state if connected, regardless of status
            if (hubConnection?.State == HubConnectionState.Connected && !string.IsNullOrEmpty(gameId))
            {
                if (DateTime.Now.Millisecond < 250) // roughly 4 times per second
                {
                    _ = hubConnection.InvokeAsync("GetGameState", gameId);
                    needsStateChange = true;
                }
            }
            
            // Only call InvokeAsync if we need to update the UI
            if (needsStateChange) 
            {
                 InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task CreateGame()
    {
        if (hubConnection?.State != HubConnectionState.Connected)
        {
            commentaryMessages.Add(new CommentaryMessage { Text = "Unable to create game: Not connected to server", Timestamp = DateTime.UtcNow });
            return;
        }

        try
        {
            isCreating = true;
            Console.WriteLine($"Creating game between {teamA} and {teamB}");
            
            // Call the CreateGame method on the hub and get the game ID directly
            gameId = await hubConnection.InvokeAsync<string>("CreateGame", teamA, teamB);
            
            Console.WriteLine($"Game created with ID: {gameId}");
            isGameCreated = true;
            isCreating = false;
            
            // Join the game we just created
            await JoinGame();
        }
        catch (Exception ex)
        {
            commentaryMessages.Add(new CommentaryMessage { Text = $"Error creating game: {ex.Message}", Timestamp = DateTime.UtcNow });
            Console.Error.WriteLine($"Error creating game: {ex}");
            isCreating = false;
        }
    }

    public async Task JoinGame()
    {
        if (string.IsNullOrWhiteSpace(gameId))
        {
            Console.WriteLine("JoinGame called but gameId is empty");
            commentaryMessages.Add(new CommentaryMessage { Text = "Please enter a game ID to join.", Timestamp = DateTime.UtcNow });
            return;
        }

        try
        {
            Console.WriteLine($"Attempting to join game with ID: {gameId}");
            isJoining = true;
            StateHasChanged();
            
            // Ensure connection is active before sending
            if (hubConnection?.State != HubConnectionState.Connected)
            {
                Console.WriteLine($"Hub not connected. Current state: {hubConnection?.State}");
                await StartHubConnection();
                
                if (hubConnection?.State != HubConnectionState.Connected)
                {
                    Console.WriteLine("Failed to connect hub after retry");
                    commentaryMessages.Add(new CommentaryMessage { Text = "Cannot join game: Connection to server is not active.", Timestamp = DateTime.UtcNow });
                    isJoining = false;
                    StateHasChanged();
                    return;
                }
            }
            
            Console.WriteLine($"Sending JoinGame request to hub for game ID: {gameId}");
            await hubConnection.SendAsync("JoinGame", gameId);
            Console.WriteLine($"JoinGame request sent successfully");
            hasJoinedGame = true;
            inLobby = false;
            commentaryMessages.Clear();
            commentaryMessages.Add(new CommentaryMessage { Text = $"Joined game {gameId}", Timestamp = DateTime.UtcNow });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in JoinGame: {ex.Message}");
            commentaryMessages.Add(new CommentaryMessage { Text = $"Error joining game: {ex.Message}", Timestamp = DateTime.UtcNow });
            Console.Error.WriteLine($"Error joining game: {ex}");
            hasJoinedGame = false;
        }
        finally
        {
            isJoining = false;
            StateHasChanged();
        }
    }

    private async Task StartGame()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected && isGameCreated)
        {
            try
            {
                await hubConnection.SendAsync("StartGame", gameId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error starting game: {ex.Message}");
            }
        }
    }

    private async Task EndGame()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected && isGameCreated)
        {
            try
            {
                await hubConnection.SendAsync("EndGame", gameId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error ending game: {ex.Message}");
            }
        }
    }

    private async Task KickBall()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected && isGameCreated)
        {
            try
            {
                await hubConnection.SendAsync("KickBall", gameId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error kicking ball: {ex.Message}");
            }
        }
    }

    private async Task SimulateGoal(string teamId)
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected && isGameCreated)
        {
            try
            {
                await hubConnection.SendAsync("SimulateGoal", gameId, teamId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error simulating goal: {ex.Message}");
            }
        }
    }

    private async Task RenderGameField()
    {
        if (isGameCreated && gameCanvas.Id is not null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("renderGameField", gameCanvas, gameState);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error rendering game field: {ex.Message}");
            }
        }
    }

    public async Task LeaveGame()
    {
        try
        {
            if (hubConnection?.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("LeaveGame", gameId);
                commentaryMessages.Add(new CommentaryMessage { Text = $"Left game {gameId}", Timestamp = DateTime.UtcNow });
            }
            
            gameId = string.Empty;
            inLobby = true;
            hasJoinedGame = false;
            gameState = new GameState();
            commentaryMessages.Clear();
        }
        catch (Exception ex)
        {
            commentaryMessages.Add(new CommentaryMessage { Text = $"Error leaving game: {ex.Message}", Timestamp = DateTime.UtcNow });
            Console.Error.WriteLine($"Error leaving game: {ex}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await DisconnectGracefully();
        await InvokeAsync(StateHasChanged);
        GC.SuppressFinalize(this);
    }

    private async Task DisconnectGracefully()
    {
        if (!disposedValue)
        {
            disposedValue = true;

            // Stop game timer
            gameTimer?.Stop();
            gameTimer?.Dispose();
            gameTimer = null;

            // Cancel reconnection attempts
            _connectionCts?.Cancel();
            _connectionCts?.Dispose();
            _connectionCts = null;

            // Clean up hub connection
            if (hubConnection != null)
            {
                try
                {
                    if (!string.IsNullOrEmpty(gameId))
                    {
                        await LeaveGame();
                    }
                    
                    await hubConnection.DisposeAsync();
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error disposing hub connection: {ex}");
                }
                finally
                {
                    hubConnection = null;
                }
            }
        }
    }

    public void Dispose()
    {
        // Call the async disposal method synchronously but don't wait for it
        _ = DisconnectGracefully();
        
        // Dispose of timer synchronously if not already disposed
        if (!disposedValue)
        {
            gameTimer?.Stop();
            gameTimer?.Dispose();
            gameTimer = null;
            
            _connectionCts?.Cancel();
            
            disposedValue = true;
        }
    }

    private string FormatGameTime(TimeSpan? gameTime)
    {
        if (gameTime == null) return "0:00";
        
        int minutes = (int)Math.Floor(gameTime.Value.TotalMinutes);
        int seconds = gameTime.Value.Seconds;
        
        return $"{minutes}:{seconds:D2}";
    }
} 